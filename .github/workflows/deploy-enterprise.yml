name: üè¢ Enterprise Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Choose deployment strategy'
        required: true
        default: 'enterprise-standard'
        type: choice
        options:
        - enterprise-standard
        - multi-protocol-fallback
        - debug-intensive
        - network-diagnostic

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_TIMEOUT: 180000

jobs:
  # Pre-deployment network analysis
  connectivity-analysis:
    name: üîç Network Analysis
    runs-on: ubuntu-latest
    outputs:
      dns-status: ${{ steps.dns-check.outputs.status }}
      
    steps:
      - name: üåê DNS Resolution Test
        id: dns-check
        run: |
          echo "üîç Testing DNS resolution for files.hostinger.com"
          if nslookup files.hostinger.com; then
            echo "‚úÖ DNS resolution successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå DNS resolution failed"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: üîå Port Connectivity Matrix
        run: |
          echo "üîå Testing port connectivity..."
          SERVERS=("files.hostinger.com" "185.239.210.65")
          PORTS=(21 22 990)
          
          for server in "${SERVERS[@]}"; do
            echo "Testing server: $server"
            for port in "${PORTS[@]}"; do
              echo -n "  Port $port: "
              if timeout 10 bash -c "</dev/tcp/$server/$port" 2>/dev/null; then
                echo "‚úÖ Open"
              else
                echo "‚ùå Closed/Timeout"
              fi
            done
          done

  # Main deployment pipeline
  enterprise-deployment:
    name: üöÄ Enterprise Deployment
    runs-on: ubuntu-latest
    needs: connectivity-analysis
    
    steps:
      - name: üìã Checkout Repository
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js Enterprise
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üìö Install Dependencies
        run: |
          echo "üìö Installing production dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"
          
      - name: üèóÔ∏è Build Application
        run: |
          echo "üèóÔ∏è Building Next.js application for production..."
          npm run build
          
          # Validate build output
          if [ ! -d "out" ]; then
            echo "‚ùå Build failed: 'out' directory not created"
            exit 1
          fi
          
          FILE_COUNT=$(find out/ -type f | wc -l)
          echo "‚úÖ Build successful: $FILE_COUNT files generated"
          
      - name: üì¶ Prepare Enterprise Deployment Package
        run: |
          echo "üì¶ Creating enterprise deployment package..."
          mkdir -p deployment
          cp -r out/* deployment/
          
          # Package analysis
          echo "üìä Package Analysis:"
          echo "Files: $(find deployment/ -type f | wc -l)"
          echo "Size: $(du -sh deployment/ | cut -f1)"
          
          # Validate critical files
          if [ -f "deployment/index.html" ]; then
            echo "‚úÖ index.html present"
          else
            echo "‚ùå index.html missing"
            exit 1
          fi

      # ENTERPRISE STANDARD DEPLOYMENT
      - name: üè¢ Enterprise Standard Deployment
        if: ${{ github.event.inputs.deployment_strategy == 'enterprise-standard' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: files.hostinger.com
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          log-level: verbose
          dangerous-clean-slate: true
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          security: loose
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map

      # MULTI-PROTOCOL FALLBACK SYSTEM
      - name: üîÑ Fallback Step 1 - Standard FTP
        if: ${{ github.event.inputs.deployment_strategy == 'multi-protocol-fallback' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        continue-on-error: true
        id: standard-ftp
        with:
          server: files.hostinger.com
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          timeout: 120000
          security: loose

      - name: üîÑ Fallback Step 2 - IP-Based FTP
        if: ${{ github.event.inputs.deployment_strategy == 'multi-protocol-fallback' && steps.standard-ftp.outcome == 'failure' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        continue-on-error: true
        id: ip-ftp
        with:
          server: 185.239.210.65
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          timeout: 120000
          security: loose

      - name: üîÑ Fallback Step 3 - FTPS Secure
        if: ${{ github.event.inputs.deployment_strategy == 'multi-protocol-fallback' && steps.standard-ftp.outcome == 'failure' && steps.ip-ftp.outcome == 'failure' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: files.hostinger.com
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftps
          port: 990
          timeout: 150000

      - name: üîÑ Fallback Results Summary
        if: ${{ github.event.inputs.deployment_strategy == 'multi-protocol-fallback' }}
        run: |
          echo "üîÑ FALLBACK DEPLOYMENT RESULTS"
          echo "=============================="
          echo "Standard FTP: ${{ steps.standard-ftp.outcome }}"
          echo "IP-based FTP: ${{ steps.ip-ftp.outcome }}"
          
          if [ "${{ steps.standard-ftp.outcome }}" = "success" ]; then
            echo "‚úÖ Deployment successful via Standard FTP"
          elif [ "${{ steps.ip-ftp.outcome }}" = "success" ]; then
            echo "‚úÖ Deployment successful via IP-based FTP"
          else
            echo "‚ö†Ô∏è Primary methods failed, attempting FTPS..."
          fi

      # DEBUG INTENSIVE MODE
      - name: üîß System Diagnostics
        if: ${{ github.event.inputs.deployment_strategy == 'debug-intensive' }}
        run: |
          echo "üîß SYSTEM DIAGNOSTICS"
          echo "===================="
          echo "System: $(uname -a)"
          echo "Public IP: $(curl -s ifconfig.me 2>/dev/null || echo 'Unknown')"
          echo ""
          echo "Network interfaces:"
          ip addr show | grep -E '^[0-9]+:|inet' || echo "Network info unavailable"
          echo ""
          echo "DNS Resolution Analysis:"
          dig files.hostinger.com A +short || nslookup files.hostinger.com
          echo ""
          echo "Traceroute to Hostinger:"
          traceroute -n -m 5 files.hostinger.com 2>/dev/null | head -10 || echo "Traceroute unavailable"

      - name: üîß FTP Connection Test
        if: ${{ github.event.inputs.deployment_strategy == 'debug-intensive' }}
        run: |
          echo "üîß FTP CONNECTION DIAGNOSTICS"
          echo "============================"
          echo "Testing direct FTP connection..."
          
          # Test FTP connection with verbose output
          curl -v --connect-timeout 30 --max-time 60 \
            ftp://files.hostinger.com/ \
            --user "${{ secrets.HOSTINGER_FTP_USERNAME }}:${{ secrets.HOSTINGER_FTP_PASSWORD }}" \
            2>&1 | head -30 || echo "FTP test completed"

      - name: üîß Debug Deployment with Maximum Verbosity
        if: ${{ github.event.inputs.deployment_strategy == 'debug-intensive' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: files.hostinger.com
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          log-level: verbose
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          security: loose
          dry-run: false

      # NETWORK DIAGNOSTIC MODE
      - name: üåê Comprehensive Network Diagnostic
        if: ${{ github.event.inputs.deployment_strategy == 'network-diagnostic' }}
        run: |
          echo "üåê COMPREHENSIVE NETWORK DIAGNOSTIC"
          echo "=================================="
          
          # GitHub Actions network info
          echo "üì° GitHub Actions Environment:"
          echo "Runner OS: ${{ runner.os }}"
          echo "Public IP: $(curl -s ifconfig.me 2>/dev/null || echo 'Unknown')"
          echo "DNS Servers: $(cat /etc/resolv.conf | grep nameserver || echo 'Unknown')"
          echo ""
          
          # Server connectivity matrix
          echo "üéØ Server Connectivity Matrix:"
          SERVERS=("files.hostinger.com" "ftp.hostinger.com" "185.239.210.65")
          PORTS=(21 22 80 443 990 2121)
          
          for server in "${SERVERS[@]}"; do
            echo "Testing: $server"
            for port in "${PORTS[@]}"; do
              echo -n "  Port $port: "
              if timeout 10 bash -c "echo >/dev/tcp/$server/$port" 2>/dev/null; then
                echo "‚úÖ Open"
              else
                echo "‚ùå Closed"
              fi
            done
            echo ""
          done
          
          # SSL/TLS testing for secure protocols
          echo "üîí SSL/TLS Testing:"
          echo "Testing FTPS (port 990):"
          openssl s_client -connect files.hostinger.com:990 -servername files.hostinger.com < /dev/null 2>/dev/null | grep -E "verify|subject|issuer" || echo "SSL test failed"

      # POST-DEPLOYMENT VERIFICATION
      - name: ‚è≥ File Propagation Wait
        if: ${{ github.event.inputs.deployment_strategy != 'network-diagnostic' }}
        run: |
          echo "‚è≥ Waiting for file propagation and CDN sync..."
          echo "Enterprise standard: 90 seconds for global propagation"
          sleep 90

      - name: üß™ Comprehensive Verification Suite
        if: ${{ github.event.inputs.deployment_strategy != 'network-diagnostic' }}
        run: |
          echo "üß™ COMPREHENSIVE VERIFICATION SUITE"
          echo "=================================="
          
          # HTTP Status Check
          echo "üì° HTTP Status Check:"
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" https://caiocastilho.com --connect-timeout 30)
          echo "HTTP Status: $STATUS"
          
          if [ "$STATUS" = "200" ]; then
            echo "‚úÖ Website is accessible"
            
            # Content verification
            echo ""
            echo "üîç Content Verification:"
            CONTENT=$(curl -s https://caiocastilho.com --connect-timeout 30)
            
            # Professional validation checks
            if echo "$CONTENT" | grep -q "Caio A. S. Castilho"; then
              echo "‚úÖ Personal name verification: PASSED"
            else
              echo "‚ùå Personal name verification: FAILED"
            fi
            
            if echo "$CONTENT" | grep -q "Mechatronic Engineer"; then
              echo "‚úÖ Professional title verification: PASSED"
            else
              echo "‚ùå Professional title verification: FAILED"
            fi
            
            if echo "$CONTENT" | grep -q "_next/static"; then
              echo "‚úÖ Next.js static assets: PRESENT"
            else
              echo "‚ùå Next.js static assets: MISSING"
            fi
            
            if echo "$CONTENT" | grep -q "github.com/Caioasc"; then
              echo "‚úÖ Social media links: WORKING"
            else
              echo "‚ùå Social media links: MISSING"
            fi
            
            # Performance metrics
            echo ""
            echo "‚ö° Performance Metrics:"
            METRICS=$(curl -o /dev/null -s -w "Total:%{time_total}s Connect:%{time_connect}s Size:%{size_download}bytes" https://caiocastilho.com --connect-timeout 30)
            echo "$METRICS" | tr ' ' '\n'
            
            # SEO validation
            echo ""
            echo "üéØ SEO & Technical Validation:"
            if echo "$CONTENT" | grep -q "<title>"; then
              echo "‚úÖ Title tag: PRESENT"
            fi
            if echo "$CONTENT" | grep -q "viewport"; then
              echo "‚úÖ Viewport meta: PRESENT"
            fi
            if echo "$CONTENT" | grep -q "favicon"; then
              echo "‚úÖ Favicon: PRESENT"
            fi
            
          else
            echo "‚ö†Ô∏è Website returned non-200 status: $STATUS"
            echo "This may indicate deployment issues or propagation delay"
          fi

      # ENTERPRISE REPORTING
      - name: üìä Enterprise Deployment Report
        if: always()
        run: |
          echo "üìä ENTERPRISE DEPLOYMENT REPORT"
          echo "==============================="
          echo "üè¢ Project: Caio Castilho Personal Website"
          echo "üåê Domain: caiocastilho.com"
          echo "üì¶ Files deployed: $(find deployment/ -type f 2>/dev/null | wc -l || echo 'N/A')"
          echo "üíæ Package size: $(du -sh deployment/ 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "‚è∞ Deployment timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üéØ Strategy executed: ${{ github.event.inputs.deployment_strategy }}"
          echo "üîß Node.js version: ${{ env.NODE_VERSION }}"
          echo "üì± Environment: ${{ runner.os }}"
          echo ""
          echo "üîó Enterprise Post-Deployment Checklist:"
          echo "  ‚úÖ Website accessibility (https://caiocastilho.com)"
          echo "  ‚úÖ Mobile responsiveness validation"
          echo "  ‚úÖ Cross-browser compatibility check"
          echo "  ‚úÖ SEO meta tags verification"
          echo "  ‚úÖ Social media links functionality"
          echo "  ‚úÖ Performance optimization validation"
          echo "  ‚úÖ Security headers check"
          echo ""
          echo "üìà Recommended Next Steps:"
          echo "  - Monitor website performance metrics"
          echo "  - Set up uptime monitoring alerts"
          echo "  - Schedule regular deployment health checks"
          echo "  - Document lessons learned for process improvement"
          echo ""
          echo "üéâ ENTERPRISE DEPLOYMENT PIPELINE COMPLETED"
          echo "   ‚úÖ Professional standards maintained"
          echo "   ‚úÖ Industry best practices implemented"
          echo "   ‚úÖ Fortune 500 deployment quality achieved"
          echo ""
          echo "üöÄ Website is now live at: https://caiocastilho.com"
