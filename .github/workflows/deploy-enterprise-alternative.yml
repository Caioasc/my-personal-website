# File: .github/workflows/deploy-enterprise-alternative.yml
name: üîß Enterprise Deploy - Alternative Methods

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Choose deployment strategy'
        required: true
        default: 'ftp-direct-ip'
        type: choice
        options:
        - ftp-direct-ip
        - ftp-alt-server
        - network-diagnostic

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_TIMEOUT: 300000
  HOSTINGER_PRIMARY_IP: '185.239.210.65'
  HOSTINGER_SECONDARY_IP: '153.92.2.12'

jobs:
  # Alternative deployment strategies to bypass 530 errors
  enterprise-deployment-alternative:
    name: üîß Alternative Deployment Strategy
    runs-on: ubuntu-latest
    
    steps:
      - name: üìã Checkout Repository
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js Enterprise
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üìö Install Dependencies
        run: |
          echo "üìö Installing production dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"
          
      - name: üèóÔ∏è Build Application
        run: |
          echo "üèóÔ∏è Building Next.js application for production..."
          npm run build
          
          # Validate build output
          if [ ! -d "out" ]; then
            echo "‚ùå Build failed: 'out' directory not created"
            exit 1
          fi
          
          FILE_COUNT=$(find out/ -type f | wc -l)
          echo "‚úÖ Build successful: $FILE_COUNT files generated"
          
      - name: üì¶ Prepare Enterprise Deployment Package
        run: |
          echo "üì¶ Creating enterprise deployment package..."
          mkdir -p deployment
          cp -r out/* deployment/
          
          # Package analysis
          echo "üìä Package Analysis:"
          echo "Files: $(find deployment/ -type f | wc -l)"
          echo "Size: $(du -sh deployment/ | cut -f1)"

      # FTP DIRECT IP DEPLOYMENT
      - name: üéØ FTP Direct IP Deployment
        if: ${{ github.event.inputs.deployment_strategy == 'ftp-direct-ip' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ env.HOSTINGER_PRIMARY_IP }}
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          log-level: verbose
          dangerous-clean-slate: true
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          security: loose
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map

      # FTP ALTERNATIVE SERVER DEPLOYMENT
      - name: üîÑ FTP Alternative Server Deployment
        if: ${{ github.event.inputs.deployment_strategy == 'ftp-alt-server' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ env.HOSTINGER_SECONDARY_IP }}
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: ./public_html/
          protocol: ftp
          port: 21
          log-level: verbose
          dangerous-clean-slate: true
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          security: loose
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
            **/Thumbs.db
            **/*.map

      # NETWORK DIAGNOSTIC MODE
      - name: üåê Network Diagnostic Analysis
        if: ${{ github.event.inputs.deployment_strategy == 'network-diagnostic' }}
        run: |
          echo "üåê ALTERNATIVE NETWORK DIAGNOSTIC"
          echo "================================"
          
          # Test alternative Hostinger endpoints
          SERVERS=(
            "files.hostinger.com"
            "ftp.hostinger.com"
            "${{ env.HOSTINGER_PRIMARY_IP }}"
            "${{ env.HOSTINGER_SECONDARY_IP }}"
          )
          
          echo "üì° Testing alternative Hostinger endpoints..."
          for server in "${SERVERS[@]}"; do
            echo "Testing: $server"
            if timeout 15 bash -c "</dev/tcp/$server/21" 2>/dev/null; then
              echo "  ‚úÖ Port 21 (FTP): OPEN"
              
              # Test basic FTP handshake
              RESPONSE=$(echo "quit" | timeout 10 telnet $server 21 2>/dev/null | head -1 || echo "No response")
              echo "  üìù FTP Response: $RESPONSE"
            else
              echo "  ‚ùå Port 21 (FTP): CLOSED"
            fi
            echo ""
          done
          
          # GitHub Actions environment info
          echo "üîç GitHub Actions Environment:"
          echo "Runner IP: $(curl -s ifconfig.me 2>/dev/null || echo 'Unknown')"
          echo "DNS servers: $(cat /etc/resolv.conf | grep nameserver | head -3)"
          echo ""
          
          # Test credential format validation
          echo "üîë Credential Format Check:"
          echo "‚úÖ Username should be: u[numbers].caiocastilho.com"
          echo "‚úÖ Password should be: FTP-specific password from hPanel"
          echo "‚úÖ Server options: files.hostinger.com, 185.239.210.65, 153.92.2.12"

      # POST-DEPLOYMENT VERIFICATION
      - name: ‚è≥ File Propagation Wait
        if: ${{ github.event.inputs.deployment_strategy != 'network-diagnostic' }}
        run: |
          echo "‚è≥ Waiting for file propagation..."
          sleep 60

      - name: üß™ Verification Suite
        if: ${{ github.event.inputs.deployment_strategy != 'network-diagnostic' }}
        run: |
          echo "üß™ VERIFICATION SUITE"
          echo "===================="
          
          # HTTP Status Check
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" https://caiocastilho.com --connect-timeout 30)
          echo "HTTP Status: $STATUS"
          
          if [ "$STATUS" = "200" ]; then
            echo "‚úÖ Website is accessible"
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ö†Ô∏è Website returned status: $STATUS"
          fi

      # DEPLOYMENT REPORT
      - name: üìä Alternative Deployment Report
        if: always()
        run: |
          echo "üìä ALTERNATIVE DEPLOYMENT REPORT"
          echo "================================"
          echo "üéØ Strategy used: ${{ github.event.inputs.deployment_strategy }}"
          echo "‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üåê Website: https://caiocastilho.com"
          echo ""
          echo "üîß Strategy Details:"
          if [ "${{ github.event.inputs.deployment_strategy }}" = "ftp-direct-ip" ]; then
            echo "  - Used direct IP connection to Hostinger"
            echo "  - Server: ${{ env.HOSTINGER_PRIMARY_IP }}"
            echo "  - Bypasses DNS resolution issues"
          elif [ "${{ github.event.inputs.deployment_strategy }}" = "ftp-alt-server" ]; then
            echo "  - Used alternative server IP"
            echo "  - Server: ${{ env.HOSTINGER_SECONDARY_IP }}"
            echo "  - Fallback for primary server issues"
          elif [ "${{ github.event.inputs.deployment_strategy }}" = "network-diagnostic" ]; then
            echo "  - Performed comprehensive network analysis"
            echo "  - Use results to optimize deployment strategy"
          fi
          echo ""
          echo "üöÄ Next Steps:"
          echo "  - Test website functionality"
          echo "  - Monitor performance"
          echo "  - Document successful strategy" 