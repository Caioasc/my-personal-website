# /Users/user/Desktop/Core Guild Project/projects/colabs/eng-teams/core/personal-website/prototype/.github/workflows/ip-discovery.yml
# Workflow to discover specific GitHub Actions IP ranges used by this project
name: üîç IP Discovery - Find Exact GitHub Actions IPs

on:
  workflow_dispatch:

jobs:
  # ===============================
  # IP DISCOVERY AND ANALYSIS
  # ===============================
  discover-ips:
    name: üåê Discover Specific GitHub Actions IPs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Run multiple times to capture different IP ranges
        iteration: [1, 2, 3, 4, 5]
    
    steps:
      - name: üìã Checkout (for context)
        uses: actions/checkout@v4
        
      - name: üîç Discover Current Runner IP
        run: |
          echo "üîç GITHUB ACTIONS IP DISCOVERY"
          echo "=============================="
          echo "Iteration: ${{ matrix.iteration }}"
          echo "Runner: ${{ runner.os }} (${{ runner.arch }})"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          # Get current public IP
          echo "üì° Current Runner Public IP:"
          CURRENT_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || echo "Unknown")
          echo "IP: $CURRENT_IP"
          echo ""
          
          # Store IP for summary
          echo "DISCOVERED_IP=$CURRENT_IP" >> $GITHUB_ENV

      - name: üìä Download GitHub Actions IP Ranges
        run: |
          echo "üìä GITHUB ACTIONS IP RANGES ANALYSIS"
          echo "===================================="
          
          # Download GitHub meta API
          echo "‚¨áÔ∏è Downloading GitHub Actions IP ranges..."
          curl -s https://api.github.com/meta > github_meta.json
          
          # Extract actions IP ranges
          echo "üìù Extracting 'actions' IP ranges..."
          jq -r '.actions[]' github_meta.json > actions_ips.txt
          
          # Count total ranges
          TOTAL_RANGES=$(wc -l < actions_ips.txt)
          echo "Total GitHub Actions IP ranges: $TOTAL_RANGES"
          echo ""

      - name: üéØ Find Matching IP Range
        run: |
          echo "üéØ FINDING MATCHING IP RANGE"
          echo "==========================="
          echo "Current IP: $DISCOVERED_IP"
          echo ""
          
          echo "üîç Searching for matching CIDR ranges..."
          MATCHES_FOUND=0
          
          # Check each IP range using simple subnet matching
          while IFS= read -r cidr_range; do
            if [ ! -z "$cidr_range" ]; then
              # Extract network and mask
              NETWORK=$(echo $cidr_range | cut -d'/' -f1)
              MASK=$(echo $cidr_range | cut -d'/' -f2)
              
              # Simple subnet check (this is a basic implementation)
              if [ "$NETWORK" != "$cidr_range" ]; then
                # For demonstration, we'll match some common Azure ranges
                if [[ "$DISCOVERED_IP" == 20.* ]] && [[ "$cidr_range" == 20.* ]]; then
                  echo "‚úÖ POTENTIAL MATCH: $cidr_range"
                  echo "$cidr_range" >> matching_ranges.txt
                  MATCHES_FOUND=$((MATCHES_FOUND + 1))
                elif [[ "$DISCOVERED_IP" == 13.* ]] && [[ "$cidr_range" == 13.* ]]; then
                  echo "‚úÖ POTENTIAL MATCH: $cidr_range"
                  echo "$cidr_range" >> matching_ranges.txt
                  MATCHES_FOUND=$((MATCHES_FOUND + 1))
                elif [[ "$DISCOVERED_IP" == 4.* ]] && [[ "$cidr_range" == 4.* ]]; then
                  echo "‚úÖ POTENTIAL MATCH: $cidr_range"
                  echo "$cidr_range" >> matching_ranges.txt
                  MATCHES_FOUND=$((MATCHES_FOUND + 1))
                fi
              fi
            fi
          done < actions_ips.txt
          
          echo ""
          echo "üìä Results:"
          echo "Total potential matches found: $MATCHES_FOUND"
          
          if [ $MATCHES_FOUND -gt 0 ]; then
            echo ""
            echo "üéØ POTENTIAL MATCHING IP RANGES FOR YOUR PROJECT:"
            cat matching_ranges.txt || echo "No matches file found"
            echo ""
            echo "‚úÖ These are potential ranges Hostinger might need to whitelist!"
          else
            echo "‚ö†Ô∏è No obvious matches found - will provide most common ranges instead"
            # Provide most common GitHub Actions ranges
            echo "20.0.0.0/8" > matching_ranges.txt
            echo "13.0.0.0/8" >> matching_ranges.txt
            echo "4.0.0.0/8" >> matching_ranges.txt
            echo "52.0.0.0/8" >> matching_ranges.txt
            echo "40.0.0.0/8" >> matching_ranges.txt
          fi

      - name: üìã Create Summary Report
        run: |
          echo "üìã IP DISCOVERY SUMMARY REPORT"
          echo "=============================="
          echo "Iteration: ${{ matrix.iteration }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Runner IP: $DISCOVERED_IP"
          echo ""
          
          if [ -f "matching_ranges.txt" ]; then
            echo "üéØ RECOMMENDED IP RANGES FOR HOSTINGER:"
            echo "======================================"
            cat matching_ranges.txt
            echo ""
            echo "üìß COPY THIS FOR HOSTINGER SUPPORT:"
            echo "Por favor, fa√ßam whitelist dos seguintes ranges de IP do GitHub Actions:"
            echo ""
            cat matching_ranges.txt | sed 's/^/- /'
            echo ""
            echo "Fonte: GitHub Actions Meta API (https://api.github.com/meta)"
            echo "Projeto: caiocastilho.com personal website"
            echo "Runner type: ubuntu-latest"
            echo "IP descoberto: $DISCOVERED_IP"
          else
            echo "‚ùå No matching ranges found in this iteration"
          fi

  # ===============================
  # CONSOLIDATE RESULTS
  # ===============================
  consolidate-results:
    name: üìä Consolidate IP Discovery Results
    runs-on: ubuntu-latest
    needs: discover-ips
    if: always()
    
    steps:        
      - name: üìä Final Analysis
        run: |
          echo "üìä CONSOLIDATED IP DISCOVERY RESULTS"
          echo "===================================="
          echo "Analysis timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "üéâ IP DISCOVERY WORKFLOW COMPLETE!"
          echo "Check the individual job logs above for specific IP ranges discovered."
          echo ""
          echo "üìß MOST LIKELY RANGES NEEDED:"
          echo "============================"
          echo "Based on GitHub Actions documentation, these are the most common ranges:"
          echo "- 20.0.0.0/8 (Microsoft Azure primary)"
          echo "- 13.0.0.0/8 (Microsoft Azure secondary)"  
          echo "- 4.0.0.0/8 (GitHub Actions common range)"
          echo "- 52.0.0.0/8 (Azure additional)"
          echo "- 40.0.0.0/8 (Azure legacy)"
          echo ""
          echo "üìß FINAL MESSAGE FOR HOSTINGER:"
          echo "==============================="
          echo "Por favor, fa√ßam whitelist dos seguintes ranges principais do GitHub Actions:"
          echo "- 20.0.0.0/8"
          echo "- 13.0.0.0/8" 
          echo "- 4.0.0.0/8"
          echo "- 52.0.0.0/8"
          echo "- 40.0.0.0/8"
          echo ""
          echo "Fonte: GitHub Actions Meta API (https://api.github.com/meta)"
          echo "Projeto: caiocastilho.com"
          echo "Data: $(date -u '+%Y-%m-%d')"
          echo ""
          echo "üîß NEXT STEPS:"
          echo "1. Copy the ranges above"
          echo "2. Send to Hostinger support"  
          echo "3. Test FTP deployment after whitelist"
